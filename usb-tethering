#!/bin/sh

# Default profile
USB_IDVENDOR=0FCE
USB_IDPRODUCT=7169
USB_IPRODUCT="Unknown"
USB_ISERIAL="Unknown"
USB_IFACE=""
USB_IMANUFACTURER="GNU/Linux Device"
ANDROID_USB=/sys/class/android_usb/android0
USB_FUNCTIONS=rndis
LOCAL_IP=10.15.19.82
GADGET_DIR=/sys/kernel/config/usb_gadget

if [ -f /etc/os-release ]; then
    USB_IMANUFACTURER=$(awk -F'"' '$1 ~ /^PRETTY_NAME/ {print $2}' /etc/os-release) 
    USB_IMANUFACTURER="${USB_IMANUFACTURER} Device"
fi

IS_EXYNOS=0
if grep -iq EXYNOS /proc/device-tree/model 2>/dev/null; then
    IS_EXYNOS=1
fi

write() {
    printf '%s' "$2" > "$1"
}

# This sets up the USB with whatever USB_FUNCTIONS are set to via configfs
usb_setup_configfs() {
    UDC=$(ls /sys/class/udc | grep -v dummy | head -1)
    [ -f "/sys/class/udc/$UDC/device/../mode" ] && write "/sys/class/udc/$UDC/device/../mode" peripheral

    mkdir -p "$GADGET_DIR/g1/strings/0x409"
    mkdir -p "$GADGET_DIR/g1/configs/c.1/strings/0x409"

    write "$GADGET_DIR/g1/idVendor" "0x$USB_IDVENDOR"
    write "$GADGET_DIR/g1/idProduct" "0x$USB_IDPRODUCT"
    write "$GADGET_DIR/g1/strings/0x409/serialnumber" "$USB_ISERIAL"
    write "$GADGET_DIR/g1/strings/0x409/manufacturer" "$USB_IMANUFACTURER"
    write "$GADGET_DIR/g1/strings/0x409/product" "$USB_IPRODUCT"

    case "$USB_FUNCTIONS" in
        *rndis*)
            mkdir -p "$GADGET_DIR/g1/functions/rndis.usb0" "$GADGET_DIR/g1/functions/rndis_bam.rndis"
            ;;
    esac

    case "$USB_FUNCTIONS" in
        *mass_storage*)
            mkdir -p "$GADGET_DIR/g1/functions/storage.0"
            ;;
    esac

    if [ $IS_EXYNOS -eq 1 ]; then
        write "$GADGET_DIR/g1/configs/c.1/strings/0x409/configuration" "Conf 1"
        write "$GADGET_DIR/g1/configs/c.1/MaxPower" 0x3f
    else
        write "$GADGET_DIR/g1/configs/c.1/strings/0x409/configuration" "$USB_FUNCTIONS"
    fi

    case "$USB_FUNCTIONS" in
        *rndis*)
            ln -sf "$GADGET_DIR/g1/functions/rndis.usb0" "$GADGET_DIR/g1/configs/c.1/"
            ln -sf "$GADGET_DIR/g1/functions/rndis_bam.rndis" "$GADGET_DIR/g1/configs/c.1/"
            if [ $IS_EXYNOS -eq 1 ]; then
                ln -sf "$GADGET_DIR/g1/functions/rndis.0" "$GADGET_DIR/g1/configs/c.1/rndis.0"
            fi
            ;;
    esac

    case "$USB_FUNCTIONS" in
        *mass_storage*)
            ln -sf "$GADGET_DIR/g1/functions/storage.0" "$GADGET_DIR/g1/configs/c.1/"
            ;;
    esac

    if [ $IS_EXYNOS -eq 1 ]; then
        write "$ANDROID_USB/enable" 0
        write "$GADGET_DIR/g1/idProduct" 0x6863
        write "$GADGET_DIR/g1/idVendor" 0x04E8
        write "$ANDROID_USB/functions" "$USB_FUNCTIONS"
        echo "$UDC" > "$GADGET_DIR/g1/UDC"
        write "$ANDROID_USB/enable" 1
    else
        echo "$UDC" > "$GADGET_DIR/g1/UDC"
    fi
}

# This sets up the USB with whatever USB_FUNCTIONS are set to via android_usb
usb_setup_android_usb() {
    write "$ANDROID_USB/enable" 0
    write "$ANDROID_USB/functions" ""
    write "$ANDROID_USB/enable" 1
    sleep 0.5
    write "$ANDROID_USB/enable" 0
    write "$ANDROID_USB/idVendor" "$USB_IDVENDOR"
    write "$ANDROID_USB/idProduct" "$USB_IDPRODUCT"
    write "$ANDROID_USB/iManufacturer" "$USB_IMANUFACTURER"
    write "$ANDROID_USB/iProduct" "$USB_IPRODUCT"
    write "$ANDROID_USB/iSerial" "$USB_ISERIAL"
    write "$ANDROID_USB/functions" "$USB_FUNCTIONS"
    write "$ANDROID_USB/enable" 1
}

# This determines which USB setup method is going to be used
usb_setup() {
    mount -t configfs none /sys/kernel/config 2>/dev/null || true

    if [ -d "$ANDROID_USB" ]; then
        usb_setup_android_usb
    elif [ -d "$GADGET_DIR" ]; then
        usb_setup_configfs
    fi
}

usb_info() {
    sleep 1
    write "$GADGET_DIR/g1/strings/0x409/serialnumber" "$1"
    printf '%s\n' "$1" >> /var/log/usb_info.log
}

ip_setup() {
    if [ -n "$USB_IFACE" ]; then
        ifconfig "$USB_IFACE" "$LOCAL_IP" netmask 255.255.255.0
        return
    fi

    if ifconfig rndis0 "$LOCAL_IP" netmask 255.255.255.0 2>/dev/null; then
        USB_IFACE=rndis0
    elif if ifconfig usb0 "$LOCAL_IP" netmask 255.255.255.0 2>/dev/null; then
        USB_IFACE=usb0
    else
        usb_info "could not setup USB tethering!"
        systemd-notify --ready --status="could not setup USB tethering!"
        return 1
    fi

    usb_info "$USB_IMANUFACTURER on $USB_IFACE $LOCAL_IP"
    systemd-notify --ready --status="$USB_IMANUFACTURER on $USB_IFACE $LOCAL_IP"
}

dhcpd_start() {
    mkdir -p /run/hybris-usb
    touch /run/hybris-usb/dhcpd4.lease
    dhcpd -f -4 -q -cf /etc/hybris-usb/dhcpd.conf -pf /run/hybris-usb/dhcpd4.pid -lf /run/hybris-usb/dhcpd4.lease
}

usb_setup
ip_setup
dhcpd_start

exit $?

# vim: set ft=sh ts=4 sw=4 et:
